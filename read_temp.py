from machine import Pin
from machine import ADC
from machine import DAC
from math import log

import machine
import utime

adc_V_lookup = [0.01235294,0.01544118,0.01852941,0.02161765,0.02470588,0.02779412,0.03088235,0.03397059,0.03705883,0.04117647,0.04529412,0.04941176,0.0525,0.05558824,0.05867647,0.06176471,0.06485294,0.06794118,0.07102942,0.07411765,0.07720589,0.08029412,0.08338234,0.08647058,0.08955881,0.09264706,0.09573528,0.09882353,0.1019118,0.105,0.1080882,0.1111765,0.1142647,0.1173529,0.1204412,0.1235294,0.1266176,0.1297059,0.1327941,0.1358824,0.1389706,0.1420588,0.1451471,0.1482353,0.1513235,0.1544118,0.1575,0.1605882,0.1636765,0.1667647,0.1698529,0.1729412,0.1760294,0.1791176,0.1822059,0.1852941,0.1894118,0.1935294,0.197647,0.2001176,0.2025882,0.2050588,0.2075294,0.21,0.2141176,0.2182353,0.2223529,0.2254412,0.2285294,0.2316176,0.2347059,0.2377941,0.2408823,0.2439706,0.2470588,0.2501471,0.2532353,0.2563235,0.2594118,0.2625,0.2655882,0.2686765,0.2717647,0.2758824,0.28,0.2841177,0.2872059,0.2902941,0.2933824,0.2964706,0.2995588,0.3026471,0.3057353,0.3088235,0.3129412,0.3170588,0.3211765,0.3242647,0.327353,0.3304411,0.3335294,0.336,0.3384706,0.3409412,0.3434117,0.3458823,0.35,0.3541176,0.3582353,0.3613235,0.3644117,0.3675,0.3705882,0.3736764,0.3767647,0.3798529,0.3829412,0.3870588,0.3911764,0.3952941,0.3983823,0.4014706,0.4045588,0.407647,0.4101176,0.4125882,0.4150588,0.4175294,0.42,0.4230882,0.4261765,0.4292647,0.4323529,0.4354412,0.4385294,0.4416176,0.4447059,0.4477941,0.4508823,0.4539706,0.4570588,0.4611764,0.4652941,0.4694118,0.4724999,0.4755882,0.4786764,0.4817647,0.4848529,0.4879412,0.4910294,0.4941176,0.4972058,0.5002941,0.5033823,0.5064706,0.5095588,0.5126471,0.5157352,0.5188235,0.5219117,0.525,0.5280882,0.5311765,0.5342647,0.5373529,0.5404411,0.5435294,0.5466176,0.5497059,0.5527941,0.5558824,0.5589705,0.5620588,0.565147,0.5682353,0.5713235,0.5744118,0.5775,0.5805882,0.5847058,0.5888235,0.5929412,0.5954117,0.5978823,0.6003529,0.6028235,0.6052941,0.6094117,0.6135294,0.6176471,0.6207353,0.6238235,0.6269117,0.63,0.6330882,0.6361765,0.6392647,0.642353,0.6454412,0.6485294,0.6516176,0.6547059,0.6577941,0.6608823,0.6639705,0.6670588,0.670147,0.6732352,0.6763235,0.6794117,0.6835294,0.6876471,0.6917646,0.6948529,0.6979411,0.7010293,0.7041176,0.7072058,0.7102941,0.7133823,0.7164705,0.7195588,0.722647,0.7257352,0.7288235,0.7319117,0.7349999,0.7380882,0.7411764,0.7442647,0.7473529,0.7504411,0.7535294,0.7566176,0.7597058,0.7627941,0.7658823,0.7689705,0.7720588,0.775147,0.7782352,0.7813235,0.7844117,0.7875,0.7905882,0.7930588,0.7955294,0.7979999,0.8004705,0.8029411,0.8060294,0.8091176,0.8122059,0.8152941,0.8177647,0.8202353,0.8227058,0.8251764,0.827647,0.8307353,0.8338235,0.8369118,0.84,0.8430882,0.8461764,0.8492647,0.8523529,0.8554412,0.8585294,0.8616177,0.8647058,0.8677941,0.8708823,0.8739706,0.8770588,0.8801471,0.8832353,0.8863235,0.8894117,0.8925,0.8955882,0.8986765,0.9017647,0.9058824,0.9099999,0.9141176,0.9165881,0.9190588,0.9215294,0.924,0.9264706,0.9305882,0.9347058,0.9388235,0.941294,0.9437647,0.9462353,0.9487059,0.9511765,0.9542646,0.9573528,0.9604411,0.9635294,0.9676471,0.9717647,0.9758823,0.9789705,0.9820587,0.985147,0.9882353,0.9913235,0.9944117,0.9974999,1.000588,1.003676,1.006765,1.009853,1.012941,1.016029,1.019118,1.022206,1.025294,1.029412,1.033529,1.037647,1.040118,1.042588,1.045059,1.047529,1.05,1.053088,1.056176,1.059265,1.062353,1.065441,1.068529,1.071618,1.074706,1.078824,1.082941,1.087059,1.090147,1.093235,1.096323,1.099412,1.1025,1.105588,1.108676,1.111765,1.114853,1.117941,1.121029,1.124118,1.127206,1.130294,1.133382,1.136471,1.139559,1.142647,1.145735,1.148823,1.151912,1.155,1.158088,1.161176,1.164265,1.167353,1.170441,1.173529,1.177647,1.181765,1.185882,1.188971,1.192059,1.195147,1.198235,1.201324,1.204412,1.2075,1.210588,1.213059,1.215529,1.218,1.220471,1.222941,1.226029,1.229118,1.232206,1.235294,1.238382,1.241471,1.244559,1.247647,1.250735,1.253824,1.256912,1.26,1.263088,1.266176,1.269265,1.272353,1.276471,1.280588,1.284706,1.287176,1.289647,1.292118,1.294588,1.297059,1.300147,1.303235,1.306324,1.309412,1.3125,1.315588,1.318676,1.321765,1.325882,1.33,1.334118,1.337206,1.340294,1.343382,1.34647,1.349559,1.352647,1.355735,1.358823,1.361912,1.365,1.368088,1.371176,1.374265,1.377353,1.380441,1.383529,1.386618,1.389706,1.392794,1.395882,1.39897,1.402059,1.405147,1.408235,1.411323,1.414412,1.4175,1.420588,1.424706,1.428823,1.432941,1.435412,1.437882,1.440353,1.442824,1.445294,1.449412,1.453529,1.457647,1.460735,1.463823,1.466912,1.47,1.473088,1.476176,1.479265,1.482353,1.485441,1.488529,1.491618,1.494706,1.497794,1.500882,1.503971,1.507059,1.510147,1.513235,1.516323,1.519412,1.5225,1.525588,1.528676,1.531765,1.534853,1.537941,1.541029,1.544118,1.547206,1.550294,1.553382,1.55647,1.559559,1.562647,1.565735,1.568823,1.571912,1.575,1.578088,1.581176,1.584265,1.587353,1.590441,1.593529,1.596618,1.599706,1.602794,1.605882,1.608353,1.610823,1.613294,1.615765,1.618235,1.621323,1.624412,1.6275,1.630588,1.633676,1.636765,1.639853,1.642941,1.647059,1.651176,1.655294,1.658382,1.661471,1.664559,1.667647,1.670735,1.673823,1.676912,1.68,1.683088,1.686176,1.689265,1.692353,1.695441,1.698529,1.701618,1.704706,1.707794,1.710882,1.713971,1.717059,1.720147,1.723235,1.726324,1.729412,1.733529,1.737647,1.741765,1.744235,1.746706,1.749177,1.751647,1.754118,1.758235,1.762353,1.766471,1.769559,1.772647,1.775735,1.778823,1.781912,1.785,1.788088,1.791176,1.794265,1.797353,1.800441,1.803529,1.806618,1.809706,1.812794,1.815882,1.818971,1.822059,1.825147,1.828235,1.832353,1.836471,1.840588,1.843676,1.846765,1.849853,1.852941,1.856029,1.859118,1.862206,1.865294,1.868382,1.87147,1.874559,1.877647,1.880735,1.883823,1.886912,1.89,1.893088,1.896176,1.899265,1.902353,1.90647,1.910588,1.914706,1.917794,1.920882,1.92397,1.927059,1.930147,1.933235,1.936323,1.939412,1.9425,1.945588,1.948676,1.951765,1.954853,1.957941,1.961029,1.964118,1.968235,1.972353,1.97647,1.979559,1.982647,1.985735,1.988823,1.991912,1.995,1.998088,2.001176,2.004265,2.007353,2.010441,2.013529,2.017647,2.021765,2.025882,2.028353,2.030823,2.033294,2.035765,2.038235,2.040706,2.043176,2.045647,2.048118,2.050588,2.053676,2.056765,2.059853,2.062941,2.067059,2.071177,2.075294,2.078382,2.08147,2.084559,2.087647,2.090735,2.093823,2.096912,2.1,2.103088,2.106176,2.109265,2.112353,2.11647,2.120588,2.124706,2.127176,2.129647,2.132118,2.134588,2.137059,2.140147,2.143235,2.146323,2.149412,2.1525,2.155588,2.158676,2.161765,2.164853,2.167941,2.171029,2.174118,2.177206,2.180294,2.183382,2.186471,2.190588,2.194706,2.198823,2.201912,2.205,2.208088,2.211176,2.214265,2.217353,2.220441,2.223529,2.226618,2.229706,2.232794,2.235882,2.238971,2.242059,2.245147,2.248235,2.251323,2.254412,2.2575,2.260588,2.264706,2.268823,2.272941,2.276029,2.279118,2.282206,2.285294,2.288382,2.291471,2.294559,2.297647,2.300117,2.302588,2.305059,2.307529,2.31,2.313088,2.316176,2.319265,2.322353,2.325441,2.328529,2.331618,2.334706,2.337794,2.340882,2.343971,2.347059,2.350147,2.353235,2.356323,2.359412,2.3625,2.365588,2.368676,2.371765,2.374235,2.376706,2.379176,2.381647,2.384118,2.387206,2.390294,2.393382,2.396471,2.399559,2.402647,2.405735,2.408823,2.411912,2.415,2.418088,2.421176,2.423647,2.426117,2.428588,2.431059,2.433529,2.436,2.43847,2.440941,2.443412,2.445882,2.448971,2.452059,2.455147,2.458235,2.461323,2.464412,2.4675,2.470588,2.474706,2.478823,2.482941,2.485412,2.487882,2.490353,2.492823,2.495294,2.498382,2.501471,2.504559,2.507647,2.510735,2.513824,2.516912,2.52,2.523088,2.526176,2.529265,2.532353,2.534823,2.537294,2.539765,2.542235,2.544706,2.547794,2.550882,2.553971,2.557059,2.560147,2.563235,2.566324,2.569412,2.5725,2.575588,2.578676,2.581765,2.584235,2.586706,2.589176,2.591647,2.594118,2.598235,2.602353,2.606471,2.608941,2.611412,2.613882,2.616353,2.618824,2.621912,2.625,2.628088,2.631176,2.633647,2.636117,2.638588,2.641059,2.643529,2.646617,2.649706,2.652794,2.655882,2.65897,2.662059,2.665147,2.668235,2.670706,2.673176,2.675647,2.678118,2.680588,2.683676,2.686764,2.689853,2.692941,2.696029,2.699117,2.702206,2.705294,2.707765,2.710235,2.712706,2.715176,2.717647,2.720118,2.722588,2.725059,2.727529,2.73,2.733088,2.736176,2.739264,2.742353,2.744823,2.747294,2.749765,2.752235,2.754706,2.758823,2.762941,2.767059,2.769529,2.772,2.774471,2.776941,2.779412,2.781471,2.783529,2.785588,2.787647,2.789706,2.791764,2.794235,2.796706,2.799176,2.801647,2.804117,2.806588,2.809059,2.811529,2.814,2.81647,2.818941,2.821412,2.823882,2.826353,2.828823,2.831294,2.833765,2.836235,2.838706,2.841176,2.843235,2.845294,2.847353,2.849412,2.85147,2.853529,2.856617,2.859706,2.862794,2.865882,2.867941,2.87,2.872059,2.874118,2.876176,2.878235,2.880706,2.883176,2.885647,2.888118,2.890588,2.893059,2.895529,2.898,2.900471,2.902941,2.905412,2.907882,2.910353,2.912823,2.915294,2.917059,2.918823,2.920588,2.922353,2.924117,2.925882,2.927647,2.929706,2.931765,2.933823,2.935882,2.937941,2.94,2.94247,2.944941,2.947412,2.949882,2.952353,2.954823,2.957294,2.959765,2.962235,2.964706,2.96625,2.967794,2.969338,2.970882,2.972426,2.97397,2.975515,2.977059,2.979118,2.981176,2.983235,2.985294,2.987353,2.989412,2.991882,2.994353,2.996824,2.999294,3.001765,3.003824,3.005882,3.007941,3.01,3.012059,3.014117,3.015882,3.017647,3.019412,3.021176,3.022941,3.024706,3.02647,3.028529,3.030588,3.032647,3.034706,3.036765,3.038823,3.040368,3.041912,3.043456,3.045,3.046544,3.048088,3.049632,3.051176,3.054265,3.057353,3.060441,3.106765]

NOM_RES = 10000
SER_RES = 9820
TEMP_NOM = 25
NUM_SAMPLES = 25
THERM_B_COEFF = 3950
ADC_MAX = 1023
ADC_Vmax = 3.15

def init_temp_sensor(TENP_SENS_ADC_PIN_NO = 32):
    adc = ADC(Pin(TENP_SENS_ADC_PIN_NO))
    adc.atten(ADC.ATTN_11DB)
    adc.width(ADC.WIDTH_10BIT)
    return adc

def read_temp(temp_sens):
    raw_read = []
    # Collect NUM_SAMPLES
    for i in range(1, NUM_SAMPLES+1):
        raw_read.append(temp_sens.read())

    # Average of the NUM_SAMPLES and look it up in the table
    raw_average = sum(raw_read)/NUM_SAMPLES
    #print('raw_avg = ' + str(raw_average))
    #print('V_measured = ' + str(adc_V_lookup[round(raw_average)]))

    # Convert to resistance
    raw_average = ADC_MAX * adc_V_lookup[round(raw_average)]/ADC_Vmax
    resistance = (SER_RES * raw_average) / (ADC_MAX - raw_average)
    #print('Thermistor resistance: {} ohms'.format(resistance))

    # Convert to temperature
    steinhart  = log(resistance / NOM_RES) / THERM_B_COEFF
    steinhart += 1.0 / (TEMP_NOM + 273.15)
    steinhart  = (1.0 / steinhart) - 273.15
    return steinhart


print("I'm alive!\n")
def getTemp():
    temp_sens = init_temp_sensor()
    temp = read_temp(temp_sens)
    return temp


